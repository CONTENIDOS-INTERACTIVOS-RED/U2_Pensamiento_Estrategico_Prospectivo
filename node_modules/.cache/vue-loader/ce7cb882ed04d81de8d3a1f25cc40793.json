{"remainingRequest":"/home/runner/work/U2_Pensamiento_Estrategico_Prospectivo/U2_Pensamiento_Estrategico_Prospectivo/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Pensamiento_Estrategico_Prospectivo/U2_Pensamiento_Estrategico_Prospectivo/src/views/curso/Tema2.vue?vue&type=template&id=2f0ab900&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Pensamiento_Estrategico_Prospectivo/U2_Pensamiento_Estrategico_Prospectivo/src/views/curso/Tema2.vue","mtime":1753758952284},{"path":"/home/runner/work/U2_Pensamiento_Estrategico_Prospectivo/U2_Pensamiento_Estrategico_Prospectivo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Pensamiento_Estrategico_Prospectivo/U2_Pensamiento_Estrategico_Prospectivo/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Pensamiento_Estrategico_Prospectivo/U2_Pensamiento_Estrategico_Prospectivo/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Pensamiento_Estrategico_Prospectivo/U2_Pensamiento_Estrategico_Prospectivo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Pensamiento_Estrategico_Prospectivo/U2_Pensamiento_Estrategico_Prospectivo/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}